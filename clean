#!/usr/bin/python
##############################################################################
# Copyright (c) 2023 Mike Sharkey mike@8bitgeek.net
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import time
import os

##############################################################################
# Application identification and version number
#
tweets_name='clean'
tweets_version='0.1'


##############################################################################
# @brief Parse the command line arguments and execute the query
# @return 0 on success, else non-zero exit code on failure.
#
def execute():
    #
    # instantiate a command-line parser, and execute it.
    # the @ref args variable contains the command line parse results. 
    #
    parser = argparse.ArgumentParser(tweets_name,'-m minutes','MIT License')
    parser.add_argument('-m','--minutes',required=True,action='store',help='Specifies age in minutes.')
    parser.add_argument('--version', action='version', version=tweets_name+' '+tweets_version)
    args = parser.parse_args()
    #
    # read and parse the input json file into a json object.
    #
    csv_dir="csv"
    files=os.listdir(csv_dir)
    for file in files:
        file_path=csv_dir+'/'+file
        file_time = os.path.getmtime(file_path)
        now_time = time.time()
        file_minutes_ago = ((now_time - file_time) / 60)
        if file_minutes_ago >= int(args.minutes):
            print(file_path)
            os.remove(file_path);        
        
    return 0

# start-finish
exit(execute())
